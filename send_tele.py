import requests
import os
from typing import Union, Optional
import glob
import pandas as pd
from datetime import datetime

# Telegram credentials
#TELEGRAM_TOKEN = "7810323512:AAEL6hDjjZgz64gADrJfcKwrqO42himl3oI" #@baocaott8bot
TELEGRAM_TOKEN = "7785723852:AAFZCei8UveSC2brM01JmW76LQMkd_2nJcU" #@bts_tt8_bot
#TELEGRAM_CHAT_ID = "-4795321025" # TEST
TELEGRAM_CHAT_ID = "-4616062001" # TEST
TELEGRAM_CHAT_ID_ALL = "-4709942351" # id nh√≥m nh·∫≠n file b√°o c√°o to√†n b·ªô chi ti·∫øt    

#TELEGRAM_CHAT_ID = "-4616062001" # CH√çNH TH·ª®C

def send_message(message: str) -> bool:
    """
    G·ª≠i tin nh·∫Øn vƒÉn b·∫£n t·ªõi Telegram.
    
    Args:
        message (str): N·ªôi dung tin nh·∫Øn c·∫ßn g·ª≠i
        
    Returns:
        bool: True n·∫øu g·ª≠i th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i
    """
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        data = {
            "chat_id": TELEGRAM_CHAT_ID,
            "text": message,
            "parse_mode": "HTML"
        }
        response = requests.post(url, data=data)
        return response.status_code == 200
    except Exception as e:
        print(f"L·ªói khi g·ª≠i tin nh·∫Øn: {str(e)}")
        return False

def send_file(file_path: str, caption: Optional[str] = None) -> bool:
    """
    G·ª≠i file (document, h√¨nh ·∫£nh, bi·ªÉu ƒë·ªì) t·ªõi Telegram.
    
    Args:
        file_path (str): ƒê∆∞·ªùng d·∫´n t·ªõi file c·∫ßn g·ª≠i
        caption (str, optional): Ch√∫ th√≠ch cho file
        
    Returns:
        bool: True n·∫øu g·ª≠i th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i
    """
    try:
        if not os.path.exists(file_path):
            print(f"File kh√¥ng t·ªìn t·∫°i: {file_path}")
            return False

        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendDocument"
        
        files = {
            'document': open(file_path, 'rb')
        }
        
        data = {
            "chat_id": TELEGRAM_CHAT_ID
        }
        
        if caption:
            data["caption"] = caption

        response = requests.post(url, data=data, files=files)
        return response.status_code == 200
    except Exception as e:
        print(f"L·ªói khi g·ª≠i file: {str(e)}")
        return False
    finally:
        files['document'].close() if 'document' in files else None

def send_image(image_path: str, caption: Optional[str] = None) -> bool:
    """
    G·ª≠i h√¨nh ·∫£nh t·ªõi Telegram v·ªõi ƒë·ªãnh d·∫°ng ·∫£nh (thay v√¨ d·∫°ng document).
    
    Args:
        image_path (str): ƒê∆∞·ªùng d·∫´n t·ªõi file ·∫£nh
        caption (str, optional): Ch√∫ th√≠ch cho ·∫£nh
        
    Returns:
        bool: True n·∫øu g·ª≠i th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i
    """
    try:
        if not os.path.exists(image_path):
            print(f"File ·∫£nh kh√¥ng t·ªìn t·∫°i: {image_path}")
            return False

        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendPhoto"
        
        files = {
            'photo': open(image_path, 'rb')
        }
        
        data = {
            "chat_id": TELEGRAM_CHAT_ID
        }
        
        if caption:
            data["caption"] = caption

        response = requests.post(url, data=data, files=files)
        return response.status_code == 200
    except Exception as e:
        print(f"L·ªói khi g·ª≠i ·∫£nh: {str(e)}")
        return False
    finally:
        files['photo'].close() if 'photo' in files else None

def send_all_reports():
    """
    G·ª≠i t·∫•t c·∫£ c√°c bi·ªÉu ƒë·ªì t·ªõi Telegram.
    """
    # G·ª≠i th√¥ng b√°o b·∫Øt ƒë·∫ßu
    send_message("üöÄ B·∫Øt ƒë·∫ßu g·ª≠i bi·ªÉu ƒë·ªì...")

    # G·ª≠i c√°c bi·ªÉu ƒë·ªì PTTB
    send_message("üìà G·ª≠i bi·ªÉu ƒë·ªì PTTB...")
    for file in glob.glob("pttb_chart/*.png"):
        caption = "üìä Bi·ªÉu ƒë·ªì PTTB"
        if "so_sanh" in file:
            caption = "üìä So s√°nh d·ªãch v·ª• PTTB"
        elif "thong_ke" in file:
            caption = "üìà Th·ªëng k√™ d·ªãch v·ª• ch√≠nh PTTB"
        elif "ty_le_Fiber" in file:
            caption = "üåê T·ª∑ l·ªá Fiber PTTB"
        elif "ty_le_MyTV" in file:
            caption = "üì∫ T·ª∑ l·ªá MyTV PTTB"
        elif "ty_le_phieu" in file:
            caption = "üìù T·ª∑ l·ªá phi·∫øu t·ªìn PTTB"
        elif "tong_so_phieu" in file:
            caption = "üìã T·ªïng s·ªë phi·∫øu t·ªìn PTTB"
        send_image(file, caption)

    # G·ª≠i c√°c bi·ªÉu ƒë·ªì ƒêHSC
    send_message("üìà G·ª≠i bi·ªÉu ƒë·ªì ƒêHSC...")
    for file in glob.glob("dhsc_chart/*.png"):
        if "thong_ke_" in file:
            huyen = file.split("_")[2]
            send_image(file, f"üìä Th·ªëng k√™ ƒêHSC - {huyen}")
        elif "ty_le_Thu√™ bao SIP" in file:
            send_image(file, "üìû T·ª∑ l·ªá Thu√™ bao SIP")
        elif "ty_le_Fiber" in file:
            send_image(file, "üåê T·ª∑ l·ªá Fiber")
        elif "ty_le_MyTV" in file:
            send_image(file, "üì∫ T·ª∑ l·ªá MyTV")
        elif "ty_le_phan_tram" in file:
            send_image(file, "üìà T·ª∑ l·ªá ph·∫ßn trƒÉm")
        elif "thong_ke_theo_dich_vu" in file:
            send_image(file, "üìä Th·ªëng k√™ theo d·ªãch v·ª•")
        elif "tong_so_may_hong" in file:
            send_image(file, "üîß T·ªïng s·ªë m√°y h·ªèng")

    # G·ª≠i th√¥ng b√°o ho√†n th√†nh
    send_message("‚úÖ ƒê√£ g·ª≠i xong t·∫•t c·∫£ bi·ªÉu ƒë·ªì!")

def send_alerts_from_excel(excel_file: str = "report_summary.xlsx") -> bool:
    """
    Read data from Excel file and send alerts via Telegram based on specific conditions:
    - Send immediately if 'N.Nh√¢n' contains 'OOS'
    - For 'AC' alerts, only send if 'K√©o d√†i' > 30
    - Check for duplicate alerts within last 30 mins for AC and 20 mins for OOS
    Also logs sent messages to an Excel file
    """
    try:
        current_time = datetime.now()
        print(f"\nüïí B·∫Øt ƒë·∫ßu ki·ªÉm tra c·∫£nh b√°o l√∫c: {current_time.strftime('%Y-%m-%d %H:%M:%S')}")

        # Create log directory if it doesn't exist
        log_dir = "log_message"
        os.makedirs(log_dir, exist_ok=True)
        log_file = os.path.join(log_dir, "ban_tin_da_gui.xlsx")

        # Read Excel file
        df = pd.read_excel(excel_file)
        
        # Check required columns
        required_columns = ['T√™n NE', 'T√™n g·ª£i nh·ªõ', 'N.Nh√¢n', 'TG S·ª± c·ªë', 'K√©o d√†i', 'Ph√¢n Lo·∫°i Tr·∫°m']
        if not all(col in df.columns for col in required_columns):
            print("‚ùå Thi·∫øu m·ªôt s·ªë c·ªôt d·ªØ li·ªáu c·∫ßn thi·∫øt")
            return False

        # Filter alerts based on conditions
        df_filtered = df[
            ((df['N.Nh√¢n'].str.contains('OOS', case=False, na=False)) |
             (df['N.Nh√¢n'].str.contains('AC', case=False, na=False))) &
            (df['Ph√¢n Lo·∫°i Tr·∫°m'] != 'Tr·∫°m vi·ªÖn th√¥ng lo·∫°i 3')
        ]

        # Load existing log if exists
        existing_log = pd.DataFrame()
        if os.path.exists(log_file):
            existing_log = pd.read_excel(log_file)
            existing_log['Th·ªùi gian g·ª≠i'] = pd.to_datetime(existing_log['Th·ªùi gian g·ª≠i'])

        # Count total alerts to send
        total_alerts = len(df_filtered)
        if total_alerts == 0:
            print("‚ÑπÔ∏è Kh√¥ng c√≥ c·∫£nh b√°o n√†o c·∫ßn g·ª≠i")
            return True

        print(f"üìä S·ªë c·∫£nh b√°o c·∫ßn ki·ªÉm tra: {total_alerts}")

        # Prepare log data
        log_data = []
        alerts_sent = 0

        # Send alerts for filtered incidents
        for index, row in df_filtered.iterrows():
            # Check for duplicates based on alert type
            time_threshold = pd.Timedelta(minutes=30 if 'AC' in str(row['N.Nh√¢n']).upper() else 20)
            
            if not existing_log.empty:
                # Get all matching records
                matching_records = existing_log[
                    (existing_log['T√™n NE'] == row['T√™n NE']) &
                    (existing_log['N·ªôi dung c·∫£nh b√°o'] == row['N.Nh√¢n'])
                ]
                
                if not matching_records.empty:
                    # Get the most recent record
                    most_recent = matching_records['Th·ªùi gian g·ª≠i'].max()
                    time_since_last = current_time - most_recent
                    
                    # Check if within threshold
                    if time_since_last < time_threshold:
                        print(f"‚è≠Ô∏è B·ªè qua c·∫£nh b√°o tr√πng l·∫∑p cho {row['T√™n NE']} (L·∫ßn g·ª≠i g·∫ßn nh·∫•t: {most_recent.strftime('%Y-%m-%d %H:%M:%S')})")
                        continue
            message = (
                f" <b>{'üî¥üî¥üóºC·∫£nh b√°o MLL tr·∫°m' if 'OOS' in str(row['N.Nh√¢n']).upper() else '‚ö°‚ö°‚ö° C·∫£nh b√°o m·∫•t AC'}</b>\n"
                f"<b>{row['T√™n NE']}</b>/{row['T√™n g·ª£i nh·ªõ']}\n"
                f"C·∫£nh b√°o: {row['N.Nh√¢n']}\n" 
                f"B·∫Øt ƒë·∫ßu: {row['TG S·ª± c·ªë']}\n"
                f"<b>K√©o d√†i: {row['K√©o d√†i']*60:.0f} ph√∫t</b>\n"
                f"{row['Ph√¢n Lo·∫°i Tr·∫°m']}\n"
                f"Ghi ch√∫: {row['T·ªânh ghi ch√∫']}"
            )
            
            send_time = datetime.now()
            success = send_message(message)
            alerts_sent += 1
            
            # Log the sent message
            log_entry = {
                'Th·ªùi gian g·ª≠i': send_time,
                'T√™n NE': row['T√™n NE'],
                'N·ªôi dung c·∫£nh b√°o': row['N.Nh√¢n'],
                'Tr·∫°ng th√°i': 'Th√†nh c√¥ng' if success else 'Th·∫•t b·∫°i'
            }
            log_data.append(log_entry)

            if success:
                print(f"‚úÖ ƒê√£ g·ª≠i c·∫£nh b√°o {alerts_sent}/{total_alerts}")
            else:
                print(f"‚ùå L·ªói khi g·ª≠i c·∫£nh b√°o {alerts_sent}/{total_alerts}")

        # Save log to Excel
        if log_data:
            log_df = pd.DataFrame(log_data)
            if not existing_log.empty:
                log_df = pd.concat([existing_log, log_df], ignore_index=True)
            log_df.to_excel(log_file, index=False)

        print(f"‚úÖ Ho√†n th√†nh g·ª≠i c·∫£nh b√°o l√∫c: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"üìä T·ªïng s·ªë c·∫£nh b√°o ƒë√£ g·ª≠i: {alerts_sent}/{total_alerts}")
        return True

    except Exception as e:
        print(f"‚ùå L·ªói khi x·ª≠ l√Ω file Excel: {str(e)}")
        return False

def send_file_report_summary(file_path: str = "report_summary.xlsx") -> bool:
    """
    G·ª≠i file b√°o c√°o t·ªïng h·ª£p qua Telegram
    """
    try:
        # Ki·ªÉm tra file t·ªìn t·∫°i
        if not os.path.exists(file_path):
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y file {file_path}")
            return False
        # Chu·∫©n b·ªã file ƒë·ªÉ g·ª≠i
        files = {
            'document': open(file_path, 'rb')
        }

        # G·ª≠i file qua Telegram API
        response = requests.post(
            f'https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendDocument',
            data={'chat_id': TELEGRAM_CHAT_ID_ALL},
            files=files
        )

        # ƒê√≥ng file sau khi g·ª≠i
        files['document'].close()

        # Ki·ªÉm tra k·∫øt qu·∫£
        if response.status_code == 200:
            print(f"‚úÖ ƒê√£ g·ª≠i file {file_path} th√†nh c√¥ng")
            return True
        else:
            print(f"‚ùå L·ªói khi g·ª≠i file: {response.text}")
            return False

    except Exception as e:
        print(f"‚ùå L·ªói khi g·ª≠i file: {str(e)}")
        return False

def send_latest_screenshot() -> bool:
    """
    Send the most recent screenshot from Screenshot_fms folder to Telegram
    
    Returns:
        bool: True if successful, False otherwise
    """
    try:
        # Get absolute path to Screenshot_fms directory
        screenshot_dir = os.path.join(os.path.dirname(__file__), "Screenshot_fms")
        print(f"Looking for screenshots in: {screenshot_dir}")
        
        # Check if directory exists
        if not os.path.exists(screenshot_dir):
            print(f"‚ùå Directory not found: {screenshot_dir}")
            return False
            
        # Get list of PNG files in directory
        screenshots = glob.glob(os.path.join(screenshot_dir, "*.png"))
        
        if not screenshots:
            print("‚ùå No screenshots found")
            return False
            
        # Get most recent screenshot by modification time
        latest_screenshot = max(screenshots, key=os.path.getmtime)
        print(f"Found latest screenshot: {latest_screenshot}")
        
        # Verify file is readable
        if not os.access(latest_screenshot, os.R_OK):
            print(f"‚ùå Cannot read file: {latest_screenshot}")
            return False
            
        # Send the screenshot
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendPhoto"
        
        with open(latest_screenshot, 'rb') as photo_file:
            files = {
                'photo': photo_file
            }
            
            data = {
                "chat_id": TELEGRAM_CHAT_ID,
                "caption": f"üì∏ Latest FMS Screenshot ({datetime.now().strftime('%Y-%m-%d %H:%M:%S')})"
            }
            
            response = requests.post(url, data=data, files=files)
            
            if response.status_code == 200:
                print(f"‚úÖ Successfully sent screenshot: {latest_screenshot}")
                return True
            else:
                print(f"‚ùå Failed to send screenshot. Status code: {response.status_code}")
                print(f"Response: {response.text}")
                return False
            
    except Exception as e:
        print(f"‚ùå Error sending screenshot: {str(e)}")
        return False
    finally:
        if 'photo' in files:
            files['photo'].close()

if __name__ == "__main__":
    send_alerts_from_excel()
    send_file_report_summary()
    send_latest_screenshot()