from playwright.sync_api import Page
import pandas as pd
import time
import os
from datetime import datetime
from login2page import login2page

def send_zalo_theo_huyen(page: Page) -> bool:
    """
    Sends Zalo messages based on district information from report_summary.xlsx
    with filtering conditions and logging functionality
    """
    try:
        current_time = datetime.now()
        print(f"\nüïí Starting Zalo message check at: {current_time.strftime('%Y-%m-%d %H:%M:%S')}")
        
        # Create log directory if it doesn't exist
        log_dir = "log_message"
        os.makedirs(log_dir, exist_ok=True)
        log_file = os.path.join(log_dir, "zalo_log.xlsx")

        # Look for report_summary.xlsx
        report_file = 'report_summary.xlsx'
        if not os.path.exists(report_file):
            print("‚ùå report_summary.xlsx not found!")
            return False
            
        print(f"Reading file: {report_file}")
        
        # Read data
        df = pd.read_excel(report_file)
        
        if df.empty:
            print("‚ÑπÔ∏è No data in report file!")
            return False

        # Filter alerts based on conditions
        # df_filtered = df[
        #     ((df['N.Nh√¢n'].str.contains('OOS', case=False, na=False)) |
        #      (df['N.Nh√¢n'].str.contains('AC', case=False, na=False) & (df['K√©o d√†i'] > 0.5))) &
        #     (df['Ph√¢n Lo·∫°i Tr·∫°m'] != 'Tr·∫°m vi·ªÖn th√¥ng lo·∫°i 3')
        # ]
        df_filtered = df[
            ((df['N.Nh√¢n'].str.contains('OOS', case=False, na=False)) |
             (df['N.Nh√¢n'].str.contains('AC', case=False, na=False))) &
            (df['Ph√¢n Lo·∫°i Tr·∫°m'] != 'Tr·∫°m vi·ªÖn th√¥ng lo·∫°i 3') &
            (~df['T√™n NE'].str.contains('STY003', case=False, na=False))
        ]

        # Load existing log if exists
        existing_log = pd.DataFrame()
        if os.path.exists(log_file):
            existing_log = pd.read_excel(log_file)
            existing_log['Th·ªùi gian g·ª≠i'] = pd.to_datetime(existing_log['Th·ªùi gian g·ª≠i'])

        # Count total alerts to send
        total_alerts = len(df_filtered)
        if total_alerts == 0:
            print("‚ÑπÔ∏è No alerts to send")
            return True

        print(f"üìä Number of alerts to check: {total_alerts}")
        
        # Wait for Zalo chat to load
        time.sleep(2)
        
        # Check if we're on Zalo chat page
        if "chat.zalo.me" not in page.url:
            print("‚è≥ Waiting for manual Zalo login...")
            page.wait_for_url("**/chat.zalo.me/**", timeout=300000)
            print("‚úÖ Successfully logged into Zalo")
        
        # Group alerts by district
        district_groups = {}
        for index, row in df_filtered.iterrows():
            district = row.get('Qu·∫≠n/Huy·ªán', 'Unknown')
            if district not in district_groups:
                district_groups[district] = []
            district_groups[district].append(row)
        
        # Prepare log data
        log_data = []
        alerts_sent = 0
        
        # Process alerts by district
        for district, rows in district_groups.items():
            try:
                # Determine which group to send to based on district
                group_name = "TEST-ZALO-AUTO"  # Default group
                
                if district == "Ba V√¨":
                    group_name = "GS v·∫≠n h√†nh MFƒê BVI-KTƒêH"
                elif district == "Ph√∫c Th·ªç":
                    group_name = "GS v·∫≠n h√†nh MFƒê PTO-KTƒêH"
                elif district == "Th·∫°ch Th·∫•t":
                    group_name = "GS v·∫≠n h√†nh MFƒê-BTS -TTT-KTƒêH"
                elif district == "ƒêan Ph∆∞·ª£ng":
                    group_name = "GS v·∫≠n h√†nh MFƒê ƒêPG-KTƒêH"
                elif district == "S∆°n T√¢y":
                    group_name = "GS v·∫≠n h√†nh MFƒê STY-KTƒêH"
                
                print(f"üîç Searching for group: {group_name} for district: {district}")
                
                # Search for the specific group
                search_input = page.locator('input#contact-search-input')
                search_input.click()
                search_input.fill("")
                search_input.fill(group_name)
                time.sleep(3)
                search_input.press("Enter")
                time.sleep(3)
                
                # Process each alert for this district
                for row in rows:
                    try:
                        # Check for duplicates based on alert type
                        time_threshold = pd.Timedelta(minutes=30 if 'AC' in str(row['N.Nh√¢n']).upper() else 20)
                        
                        if not existing_log.empty:
                            # Get all matching records
                            matching_records = existing_log[
                                (existing_log['T√™n NE'] == row['T√™n NE']) &
                                (existing_log['N·ªôi dung c·∫£nh b√°o'] == row['N.Nh√¢n'])
                            ]
                            
                            if not matching_records.empty:
                                # Get the most recent record
                                most_recent = matching_records['Th·ªùi gian g·ª≠i'].max()
                                time_since_last = current_time - most_recent
                                
                                # Check if within threshold
                                if time_since_last < time_threshold:
                                    print(f"‚è≠Ô∏è Skipping duplicate alert for {row['T√™n NE']} (Last sent: {most_recent.strftime('%Y-%m-%d %H:%M:%S')})")
                                    continue

                        # Prepare message header based on alert type
                        if 'OOS' in str(row['N.Nh√¢n']).upper():
                            header = "üî¥üî¥C·∫£nh b√°o MLL tr·∫°m üóº"
                        elif 'AC' in str(row['N.Nh√¢n']).upper():
                            header = "‚ö°‚ö°‚ö°C·∫£nh b√°o m·∫•t AC üîã"
                        # else:
                        #     header = "üî¥ C·∫£nh b√°o s·ª± c·ªë k√©o d√†i"
                        # if pd.notna(row['Qu·∫≠n/Huy·ªán']):
                        #     if row['Qu·∫≠n/Huy·ªán'] == "Ba V√¨":
                        #         header = "üî¥ C·∫£nh b√°o s·ª± c·ªë Ba V√¨"
                        #     elif row['Qu·∫≠n/Huy·ªán'] == "Ph√∫c Th·ªç":
                        #         header = "üî¥ C·∫£nh b√°o s·ª± c·ªë  Ph√∫c Th·ªç"
                        #     elif row['Qu·∫≠n/Huy·ªán'] == "S∆°n T√¢y":
                        #         header = "üî¥ C·∫£nh b√°o s·ª± c·ªë S∆°n T√¢y"
                        #     elif row['Qu·∫≠n/Huy·ªán'] == "Th·∫°ch Th·∫•t":
                        #         header = "üî¥ C·∫£nh b√°o s·ª± c·ªë Th·∫°ch Th·∫•t"
                        #     elif row['Qu·∫≠n/Huy·ªán'] == "ƒêan Ph∆∞·ª£ng":
                        #         header = "üî¥ C·∫£nh b√°o s·ª± c·ªë ƒêan Ph∆∞·ª£ng"
                        
                        # Format duration
                        duration = row.get('K√©o d√†i', 0)
                        if isinstance(duration, (int, float)):
                            # Convert hours to minutes and format with 2 decimal places
                            duration_minutes = duration * 60
                            duration_str = f"{duration_minutes:.2f}"
                        else:
                            # Try to convert string to float, multiply by 60, then format
                            try:
                                duration_minutes = float(duration) * 60
                                duration_str = f"{duration_minutes:.2f}"
                            except (ValueError, TypeError):
                                duration_str = str(duration)
                        
                        # Prepare message
                        message = (
                            f"{header}\n"
                            f"{row.get('T√™n NE', 'N/A')}/{row.get('T√™n g·ª£i nh·ªõ', 'N/A')}\n"
                            f"C·∫£nh b√°o: {row.get('N.Nh√¢n', 'N/A')}\n"
                            f"B·∫Øt ƒë·∫ßu: {row.get('TG S·ª± c·ªë', 'N/A')}\n"
                            f"K√©o d√†i: ==={duration_str}=== ph√∫t\n"
                            f"{row.get('Ph√¢n Lo·∫°i Tr·∫°m', 'N/A')}\n"
                            f"Ghi ch√∫: {row.get('T·ªânh ghi ch√∫', 'N/A')}"
                        )
                        
                        # Find message input and send message
                        message_input = page.locator('div#input_line_0')
                        message_input.fill(message)
                        time.sleep(2)
                        
                        # Click send button
                        send_button = page.locator('//*[@id="chat-input-container-id"]/div[2]/div[2]/div[2]/i')
                        send_button.click()
                        
                        send_time = datetime.now()
                        alerts_sent += 1

                        # Log the sent message
                        log_entry = {
                            'Th·ªùi gian g·ª≠i': send_time,
                            'T√™n NE': row['T√™n NE'],
                            'N·ªôi dung c·∫£nh b√°o': row['N.Nh√¢n'],
                            'Tr·∫°ng th√°i': 'Th√†nh c√¥ng',
                            'Qu·∫≠n/Huy·ªán': district,
                            'Nh√≥m Zalo': group_name
                        }
                        log_data.append(log_entry)
                        
                        time.sleep(2)
                        print(f"‚úÖ Sent message {alerts_sent}/{total_alerts} to group {group_name}")
                        
                    except Exception as e:
                        print(f"‚ùå Error processing record for {district}: {str(e)}")
                        # Log failed message
                        log_entry = {
                            'Th·ªùi gian g·ª≠i': datetime.now(),
                            'T√™n NE': row['T√™n NE'],
                            'N·ªôi dung c·∫£nh b√°o': row['N.Nh√¢n'],
                            'Tr·∫°ng th√°i': 'Th·∫•t b·∫°i',
                            'Qu·∫≠n/Huy·ªán': district,
                            'Nh√≥m Zalo': group_name
                        }
                        log_data.append(log_entry)
                
            except Exception as e:
                print(f"‚ùå Error processing district {district}: {str(e)}")

        # Save log to Excel
        if log_data:
            log_df = pd.DataFrame(log_data)
            if not existing_log.empty:
                log_df = pd.concat([existing_log, log_df], ignore_index=True)
            log_df.to_excel(log_file, index=False)

        print(f"‚úÖ Completed sending alerts at: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"üìä Total alerts sent: {alerts_sent}/{total_alerts}")
        return True
        
    except Exception as e:
        print(f"‚ùå Error in send_zalo_theo_huyen: {str(e)}")
        return False
if __name__ == "__main__":
    login2page(p)
    send_zalo_theo_huyen(page)
